substitutions:
    _APP_NAME: nodeapp # change this value for your custom app
    _REGION: us-central1 # change this value if you need your static IP to be of a different tier or region
    _ZONE: us-central1-a # change this value for the VM instance
    _DOCKER_IMAGE: gcr.io/control-plane-275516/nodeapp # change this value for container image location
    _VM_INSTANCE_NAME: node-vm # change this value for vm instance name
    _VM_INSTANCE_GROUP: node-group # change this value for vm instance group name
    _BACKEND_SERVICE_NAME: node-backend-service # change this value for backend service group name
images: ['gcr.io/control-plane-275516/nodeapp']
options:
  substitution_option: 'ALLOW_LOOSE'

steps:
# Buuild a docker image with node application
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/control-plane-275516/nodeapp', '.']
  id: 'container-create'
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/control-plane-275516/nodeapp']
  id: 'container-push'
  waitFor: ['container-create']

# Create the static public facing IP
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'public-ip-create'
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    echo "****** Starting to allocate External IP ********"  \
    && gcloud compute addresses create ${_APP_NAME} \
        --ip-version=IPV4 \
        --global \
    && export ext_ip=$(gcloud compute addresses describe ${_APP_NAME} --global| sed -n 's/^address://p') \
    && echo $ext_ip'.nip.io' \
    && echo "****** End External IP Allocation ********"  \
  waitFor: ['container-push']

# Crate a VM that runs the node docker image
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'vm-create'
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    echo "****** Starting VM creation ********"  \
    && gcloud compute instances create-with-container ${_VM_INSTANCE_NAME} \
        --zone ${_ZONE} \
        --container-image=${_DOCKER_IMAGE} \
        --no-address \
        --tags http-server,https-server,ssh,nodeapp,allow-health-check \
    && echo "****** End VM Creation ********"  \
  waitFor: ['container-push']

# Crate a instance group that runs the includes the VM instance
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'instance-group-create'
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    echo "****** Starting instance group creation ********"  \
    &&  gcloud compute instance-groups unmanaged create ${_VM_INSTANCE_GROUP} \
          --zone ${_ZONE} \
    &&  gcloud compute instance-groups unmanaged add-instances ${_VM_INSTANCE_GROUP} \
          --zone=${_ZONE} \
          --instances=${_VM_INSTANCE_NAME} \
    && gcloud compute instance-groups unmanaged set-named-ports ${_VM_INSTANCE_GROUP} \
        --named-ports http:8080 \
        --zone ${_ZONE} \
    && echo "****** End instance group creation ********" 
  waitFor: ['container-create','container-push','vm-create']

# Crate a FW rules for the VM instance
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'fw-rules-create'
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    echo "****** Starting instance group creation ********"  \
    && gcloud compute firewall-rules create fw-allow-health-check \
        --network=default \
        --action=allow \
        --direction=ingress \
        --source-ranges=130.211.0.0/22,35.191.0.0/16 \
        --target-tags=nodeapp \
        --rules=tcp \
    && echo "****** End instance group creation ********" 
  waitFor: ['container-create','container-push','vm-create']



# create SSL Cert 
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'SSL-Cert-create'
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    echo "****** Starting SSL cert creation ********"  \
    && export ext_ip=$(gcloud compute addresses describe ${_APP_NAME} --global | sed -n 's/^address://p') \
    && export ext_ip="$(echo -e "${ext_ip}" | tr -d '[:space:]')" \
    && export ext_ip=$ext_ip'.nip.io' \
    && echo $ext_ip \
    && gcloud compute ssl-certificates create ${_APP_NAME}-cert \
        --description=${_APP_NAME}_cert \
        --domains=$ext_ip \
        --global \
    && echo "****** End SSL cert creation ********" 
  waitFor: ['container-create', 'vm-create','instance-group-create']

# create LB 
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'LB-service-create'
  entrypoint: 'bash'
  args:
  - '-eEuo'
  - 'pipefail'
  - '-c'
  - |-
    echo "****** Starting LB service group creation ********"  \
    &&  gcloud compute backend-services create ${_BACKEND_SERVICE_NAME} \
          --protocol=HTTP \
          --port-name=http \
          --health-checks=http-basic-check \
          --global \
    &&  gcloud compute backend-services add-backend ${_BACKEND_SERVICE_NAME} \
          --instance-group=${_VM_INSTANCE_GROUP} \
          --instance-group-zone=${_ZONE} \
          --global \
    &&  gcloud compute url-maps create web-map-https \
          --default-service ${_BACKEND_SERVICE_NAME} \
    &&  gcloud compute target-https-proxies create https-lb-proxy \
          --url-map web-map-https --ssl-certificates ${_APP_NAME}-cert \
    &&  gcloud compute forwarding-rules create https-content-rule \
          --address=${_APP_NAME}\
          --global \
          --target-https-proxy=https-lb-proxy \
          --ports=443 \
    && echo "****** End LB service group creation ********" 
  waitFor: ['container-create', 'vm-create','instance-group-create','SSL-Cert-create']